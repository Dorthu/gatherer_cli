#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;

#some setup
my %mapping = ( 
	'-n' => {
		'name'=> 'name',
		'desc'=> 'text contained in the name',
		'split' => ' ',
		'join' => '+'
	},
	'-c' => {
		'name'=> 'color',
		'desc'=> 'color of the card',
		'split' => '',
		'join' => '|'
	},
	'-r' => {
		'name'=> 'text',
		'desc'=> 'text contained in rules',
		'split' => ' ',
		'join' => '+'
	},
	'-f' => {
		'name' => 'format',
		'desc' => '[s]tandard, [m]odern, [l]egacy, [v]intage, [c]ommander',
		'split' => '',
		'join' => '|',
		'expand' => {
			'c' => '"Commander"',
			's' => '"Standard"',
			'm' => '"Modern"',
			'l' => '"Legacy"',
			'v' => '"Vintage"'
		}
	},
	'-t' => {
		'name' => 'type',
		'desc' => "[c]reature, [a]rtifact, [s]orcery, [i]nstant, \n" .
				"\t\t[e]nchantment, [p]laneswalker, [l]and",
		'split' => '',
		'join' => '|',
		'expand' => {
			'c' => '"Creatrue"',
			'a' => '"Artifact"',
			's' => '"Sorcery"',
			'i' => '"Instant"',
			'e' => '"Enchantment"',
			'p' => '"Planeswalker"',
			'l' => '"Land"'
		}
	},
	'-cmc' => {
		'name' => 'cmc',
		'desc' => 'converted mana cost',
		'numeric' => 1,
		'comparison' => '='
	},
	'-pow' => {
		'name' => 'power',
		'desc' => 'a creature\'s power',
		'numeric' => 1,
		'comparison' => '='
	},
	'-tough' => {
		'name' => 'tough',
		'desc' => 'a creature\'s toughness',
		'numeric' => 1,
		'comparison' => '='
	},
	'-st' => {
		'name' => 'subtype',
		'desc' => 'subtype (i.e. eye, elf, eldrazi)',
		'split' => ' ',
		'join' => '|'
	}
);

my ($command) = grep { `which $_`  } ('sensible-browser', 'open');
unsupported() and exit(1) unless $command;

#begin
help() and exit(0) unless @ARGV;

my %params = @ARGV;

die "Invalid arguments" if grep { $_ !~ /^-/ } keys %params;

my $base_url = 'http://gatherer.wizards.com/Pages/Search/Default.aspx?action=advanced';

$base_url .= make_url_param($_, $params{$_}) foreach keys %params;

system $command, $base_url;
print "$base_url\n";

#functions and stuff
sub make_url_param
{
	my ($type, $arg) = @_;

	return unless $mapping{$type};
	my $ret = "&$mapping{$type}->{name}=";

	if(defined $mapping{$type}->{split}) {
		foreach(split /$mapping{$type}->{split}/, $arg) {
			s/$_/$mapping{$type}->{expand}->{lc $_}/ if defined $mapping{$type}->{expand};
			$ret .= "$mapping{$type}->{join}\[$_]";
		}
	}
	elsif(defined $mapping{$type}->{numeric}) {
		my $oper = $arg =~ s/^([=<>])// ? $1 : $mapping{$type}->{comparison};
		die "$type should be numeric!" unless $arg =~ /^\d+$/;
		$ret .= "+$oper\[$arg]";
	}
	else {
		$ret .= "+[$arg]";
	}

	return $ret;
}

sub help
{
	print "gatherer - command line interface to the online mtg card db\n\n";
	print "use:\n\tgatherer -n 'llanowar elves'\n\n";
	print "options:\n";
	print "\t$_\t$mapping{$_}->{'desc'}\n" foreach keys %mapping;
	print "\n";
	print "modifiers:\n";
	print "\t'!'\tnegate\n";
	print "\t'<x'\tless than\n";
	print "\t'>x'\tgreater than\n";
	print "\n";
	print "examples:\n";
	print "\tgatherer -n llanowar -c GR\t find all cards whose name contains \n";
	print "\t\t'llanowar' and are green or red\n\n";
	print "\tgatherer -c !U -r counter\t find all cards that are not blue \n";
	print "\t\tand whose rules contain the word 'counter'\n";
	print "\n";
	print "like it/hate it/want to contribute?  look no further than:\n";
	print "\thttps://github.com/Dorthu/gatherer_cli\n";
}

sub unsupported
{
	print "it looks like we don't support your platform..sorry about that\n\n";
	print "if you want to add support, please submit a PR to this project at:\n";
	print "\thttps://githib.com/Dorthu/gatherer_cli\n\n";
	print "it should be as easy as editing the list of posisble commands to\n";
	print "open a browser with (up at the top of gatherer - it's all perl!)\n";
}
