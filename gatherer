#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use URI;
use Term::ANSIColor;
use Web::Scraper;

#some setup
my %mapping = (
	'-n' => {
		'name'=> 'name',
		'desc'=> 'text contained in the name',
		'split' => ' ',
		'join' => '+'
	},
	'-c' => {
		'name'=> 'color',
		'desc'=> 'color of the card',
		'split' => '',
		'join' => '|'
	},
	'-r' => {
		'name'=> 'text',
		'desc'=> 'text contained in rules',
		'split' => ' ',
		'join' => '+'
	},
	'-f' => {
		'name' => 'format',
		'desc' => '[s]tandard, [m]odern, [l]egacy, [v]intage, [c]ommander',
		'split' => '',
		'join' => '|',
		'expand' => {
			'c' => '"Commander"',
			's' => '"Standard"',
			'm' => '"Modern"',
			'l' => '"Legacy"',
			'v' => '"Vintage"'
		}
	},
	'-t' => {
		'name' => 'type',
		'desc' => "[c]reature, [a]rtifact, [s]orcery, [i]nstant, \n" .
				"\t\t[e]nchantment, [p]laneswalker, [l]and, \n" .
				"\t\tle[g]end",
		'split' => '',
		'join' => '|',
		'expand' => {
			'c' => '"Creature"',
			'a' => '"Artifact"',
			's' => '"Sorcery"',
			'i' => '"Instant"',
			'e' => '"Enchantment"',
			'p' => '"Planeswalker"',
			'l' => '"Land"',
			'g' => '"Legendary"'
		}
	},
	'-cmc' => {
		'name' => 'cmc',
		'desc' => 'converted mana cost',
		'numeric' => 1,
		'comparison' => '='
	},
	'-pow' => {
		'name' => 'power',
		'desc' => 'a creature\'s power',
		'numeric' => 1,
		'comparison' => '='
	},
	'-tough' => {
		'name' => 'tough',
		'desc' => 'a creature\'s toughness',
		'numeric' => 1,
		'comparison' => '='
	},
	'-st' => {
		'name' => 'subtype',
		'desc' => 'subtype (i.e. eye, elf, eldrazi)',
		'split' => ' ',
		'join' => '|'
	},
	'-rare' => {
		'name' => 'rarity',
		'desc' => '[r]are, [u]ncommon, [c]ommon, [m]ythic rare',
		'split' => '',
		'join' => '|'
	}
);

my @args = grep { $_ !~ /^-b$/ } @ARGV;
my $browser = scalar @ARGV ne scalar @args;

my ($command) = grep { `which $_`  } ('sensible-browser', 'open');
unsupported() and exit(1) if not $command and $browser;

#begin
help() and exit(0) unless @ARGV;

# make sure everything's paired
die "Invalid arguments (everything except -b must be paired)" if scalar @args % 2;

# parse parameters
my %params = @args;
die "Invalid arguments" if grep { $_ !~ /^-/ } keys %params;

my $base_url = 'http://gatherer.wizards.com/Pages/Search/Default.aspx?action=advanced';

$base_url .= make_url_param($_, $params{$_}) foreach keys %params;

system $command, $base_url if $browser;
print "$base_url\n";
show_text($base_url) unless $browser;
exit(0);

#functions and stuff
sub make_url_param
{
	my ($type, $arg) = @_;

	return unless $mapping{$type};
	my $ret = "&$mapping{$type}->{name}=";
	my $join = $arg =~ s/^([+|!])// ? $1 =~ s/!/+!/r : $mapping{$type}->{join};

	if(defined $mapping{$type}->{split}) {
		foreach(split /$mapping{$type}->{split}/, $arg) {
			s/$_/$mapping{$type}->{expand}->{lc $_}/ if defined $mapping{$type}->{expand};
			$ret .= "$join\[$_]";
		}
	}
	elsif(defined $mapping{$type}->{numeric}) {
		my $oper = $arg =~ s/^([=<>])// ? $1 : $mapping{$type}->{comparison};
		die "$type should be numeric!" unless $arg =~ /^\d+$/;
		$ret .= "+$oper\[$arg]";
	}
	else {
		$ret .= "+[$arg]";
	}

	return $ret;
}

sub show_text
{
	my $url = shift;
	my $res = scrape_results($url);

	open LESS, '|less -cSRM' or die "couldn't find les!";
	foreach(@{$res->{cards}}) {
		print LESS color 'bold';
		print LESS "$_->{name}\t";
		print LESS color 'reset';
		foreach(@{$_->{mana}}) {
            s/Blu/U/; s| or |/|; s|[a-z -]+||g;
			print LESS "{$1}" if m|([1-9A-Z/]+)|;
        }
		print LESS "\n";
		print LESS "$_->{type}\n\n";
		foreach(@{$_->{rules}}) {
			print LESS "* $_\n" if $_ =~ /\w/;
		}
		print LESS "\n\n";
	}
	close LESS;
}

sub scrape_results
{
	my $target_url = shift;
	my $scraper = scraper {
		process "table.cardItemTable > tr > td > table", 'cards[]' => scraper {
			process "tr > td.middleCol > div.cardInfo > span.cardTitle", 'name' => [ 'TEXT', sub { s/^\s+// } ];
			process "tr > td.middleCol > div.cardInfo > span.manaCost > img", 'mana[]' => '@alt';
			process "tr > td.middleCol > div.cardInfo > span.convertedManaCost", 'cmc' => 'TEXT';
			process "tr > td.middleCol > div.cardInfo > span.typeLine", 'type' => [ 'TEXT', sub { s/^\s+// }, sub { s/[^[:ascii:]]+//g }];
			process "tr > td.middleCol > div.cardInfo > div.rulesText > p", 'rules[]' => 'TEXT';
		};
	};

	my $out = $scraper->scrape(URI->new($target_url));
	return $out;
}

sub help
{
	print "gatherer - command line interface to the online mtg card db\n\n";
	print "use:\n\tgatherer -n 'llanowar elves'\n\n";
	print "options:\n";
	print "\t-b:\tshow output in new browser tab\n";
	print "\t$_\t$mapping{$_}->{'desc'}\n" foreach keys %mapping;
	print "\n";
	print "modifiers:\n";
	print "\t'!'\tnegate\n";
	print "\t'+'\tand operator\n";
	print "\t'|'\tor operator\n";
	print "\t'<x'\tless than\n";
	print "\t'>x'\tgreater than\n";
	print "\n";
	print "examples:\n";
	print "\tgatherer -n llanowar -c GR\t find all cards whose name contains \n";
	print "\t\t'llanowar' and are green or red\n\n";
	print "\tgatherer -c !U -r counter\t find all cards that are not blue \n";
	print "\t\tand whose rules contain the word 'counter'\n\n";
	print "\tgatherer -c '+GR' -pow '>5'\tfind all creatures that are green\n";
	print "\t\tand red and whose power is greater than 5\n\n";
	print "\tgatherer -c '!GBW' -r scry -t '!l'\tfind all nonland cards whose\n";
	print "\t\trules contain 'scry' and who are not green, white or black\n";
	print "\n";
	print "like it/hate it/want to contribute?  look no further than:\n";
	print "\thttps://github.com/Dorthu/gatherer_cli\n";
}

sub unsupported
{
	print "it looks like we don't support your platform..sorry about that\n\n";
	print "if you want to add support, please submit a PR to this project at:\n";
	print "\thttps://githib.com/Dorthu/gatherer_cli\n\n";
	print "it should be as easy as editing the list of posisble commands to\n";
	print "open a browser with (up at the top of gatherer - it's all perl!)\n";
}
